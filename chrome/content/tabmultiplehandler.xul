<?xml version="1.0" encoding="UTF-8"?>
<overlay  xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
 
	<script type="application/x-javascript">
  	  <![CDATA[
	  /*
		improvements more than welcome please submit these to github, regards
	  */
	  
		var titoTMH = {
		  
		  _allowSelectionTimer :false,
		  _selection: [],
		  
		  load:function()
		  {
			removeEventListener('load', titoTMH.load, false);
	  		document.addEventListener('mouseup', titoTMH._mouseup, true);
			titoTMH._el('topview').addEventListener('mousedown', titoTMH._mousedown, true);
		  },
		  unload:function()
		  {
			document.removeEventListener('mouseup', titoTMH._mouseup, true);
			titoTMH._el('topview').removeEventListener('mousedown', titoTMH._mousedown, true);
		  },
		  _mousedown:function(aEvent)
		  {
			if(aEvent.button != 0 || aEvent.originalTarget.tagName == 'html:embed'){}
			else
			{
			  var tab = titoTMH._getTab(aEvent.originalTarget);
			  if(tab)
			  {
				//after some mseconds wihtout moving the mouse: cancel all drag events, listeng mousemove and select hovered tabs
				titoTMH._allowSelectionTimer = setTimeout(function(){ titoTMH._selectingStart();}, 220);
				document.addEventListener('mousemove', titoTMH._selectingCancel, true);
				titoTMH._selectedFirstTab = tab;
				titoTMH._selection = [];
			  }
			}
		  },
		  _selectingCancel:function()
		  {
			try{clearTimeout(titoTMH._allowSelectionTimer);}catch(e){}
			document.removeEventListener('mousemove', titoTMH._selectingCancel, true);
		  },
		  _selectingStart:function()
		  {
			if(titoTMH._selectedFirstTab)
			{
			  titoTMH._selectedFirstTab.setAttribute('tab-multiple-handler-selected', true);
			  titoTMH._lastSelectedTab = titoTMH._selectedFirstTab;
			  titoTMH._selection[titoTMH._selection.length] = titoTMH._selectedFirstTab;
			}
			
			document.removeEventListener('mousemove', titoTMH._selectingCancel, true);
			titoTMH._el('topview').addEventListener('mousemove', titoTMH._selectingSelect, true);
			titoTMH._eventsStop();
		  },

		  _selectingSelect:function(aEvent)
		  {
			if(aEvent.button != 0 || aEvent.originalTarget.tagName == 'html:embed'){}
			else
			{
			  aEvent.preventDefault();
			  aEvent.stopPropagation();
			  var tab = titoTMH._getTab(aEvent.originalTarget);
			  if(tab)
			  {
				if(tab != titoTMH._lastSelectedTab)
				{
				  titoTMH._lastSelectedTab = tab;
				  if(tab.hasAttribute('tab-multiple-handler-selected'))
				  {
					tab.removeAttribute('tab-multiple-handler-selected')
					for(var id in  titoTMH._selection)
					{
					  if(titoTMH._selection[id] == tab)
					  {
						titoTMH._selection[id] = null;
						break;
					  }
					}
				  }
				  else
				  {
					tab.setAttribute('tab-multiple-handler-selected', true)
					titoTMH._selection[titoTMH._selection.length] = tab;
				  }
				}
			  }
			  else
			  {
				titoTMH._lastSelectedTab = false;
			  }
			}
		  },
		  _mouseup:function(aEvent)
		  {
			titoTMH._eventsAllow();
			try{clearTimeout(titoTMH._allowSelectionTimer);}catch(e){}
			titoTMH._el('topview').removeEventListener('mousemove', titoTMH._selectingSelect, true);
			
			if(titoTMH._selection.length)
			{
			  if(
				 aEvent.originalTarget.parentNode &&
				 aEvent.originalTarget.parentNode != titoTMH._el('titoTMH')
			  )
			  {
				aEvent.stopPropagation();
				aEvent.preventDefault();
			  }
			  
			  var someDirty = 0;
			  for(var id in titoTMH._selection)
			  {
				if(!titoTMH._selection[id])
				  continue;
				
				if(titoTMH._selection[id].getAttribute('clean') == 'false')
				{
				  someDirty++;
				}
			  }
			  if(someDirty > 0)
				titoTMH._el('titoTMH').lastChild.removeAttribute('disabled');
			  else
				titoTMH._el('titoTMH').lastChild.setAttribute('disabled', true);
			  
			  if(someDirty == 1)
				titoTMH._el('titoTMH').lastChild.setAttribute('label', 'Save the tab');
			  else
				titoTMH._el('titoTMH').lastChild.setAttribute('label', 'Save selected tabs');
				
			  var nonSelectedTabs = titoTMH.getNonSelectedTabs();
			  if(nonSelectedTabs.length)
				titoTMH._el('titoTMH').firstChild.nextSibling.removeAttribute('disabled');
			  else
				titoTMH._el('titoTMH').firstChild.nextSibling.setAttribute('disabled', true);
				
			  if(nonSelectedTabs.length == 1)
				titoTMH._el('titoTMH').firstChild.nextSibling.setAttribute('label', 'Close the other tab');
			  else
				titoTMH._el('titoTMH').firstChild.nextSibling.setAttribute('label', 'Close other tabs');
				
			  if(titoTMH._selection.length == 1)
				titoTMH._el('titoTMH').firstChild.setAttribute('label', 'Close the tab');
			  else
				titoTMH._el('titoTMH').firstChild.setAttribute('label', 'Close selected tabs');

			  titoTMH._el('titoTMH').openPopupAtScreen(aEvent.screenX, aEvent.screenY, true);
			}
		  },
		  
		  clearSelection:function()
		  {
			for(var id in titoTMH._selection)
			{
			  if(!titoTMH._selection[id])
				continue;
			  titoTMH._selection[id].removeAttribute('tab-multiple-handler-selected');
			}
			titoTMH._selection = [];
		  },
		  onCommand:function(aElement)
		  {
			var aCommand = aElement.getAttribute('action');
			
			switch(aCommand)
			{
			  case 'close' :
				{
				  var views = titoTMH.getSelectedTabs();
				  
				  for(var i=0;i<views.length;i++)
					views[i].close();
				  
				  break;
				}
			  case 'save' :
				{
				  var views = titoTMH.getSelectedTabs();
				  
				  for(var i=0;i<views.length;i++)
					views[i].save();
				  
				  break;
				}
			  case 'close-others' :
				{
				  var views = titoTMH.getNonSelectedTabs();
				  
				  for(var i=0;i<views.length;i++)
					views[i].close();
					
				  break;
				}
			  case 'your-command-welcome-here' :
				{
				  break;
				}
			}
			titoTMH.clearSelection();
		  },
		  //returns an array with the views of the selected tabs
		  getSelectedTabs:function()
		  {
			var views = ko.views.manager.topView.getDocumentViews(true);
			var tabs = [];
			
			for(var i=0;i<views.length;i++)
			{
			  var uid = views[i].uid;
			  for(var id in titoTMH._selection)
			  {
				if(!titoTMH._selection[id])
				  continue;

				if(
					//is this tab from the current browser/splited?
					titoTMH._selection[id].parentNode.parentNode.parentNode.id.replace('view-', '') ==
					views[i].tabbedViewId
					&&
					(
					  //unfortunately these uids will never match
					  titoTMH._selection[id].getAttribute('id') == uid
					  ||
					  titoTMH._selection[id].getAttribute('tooltiptext') ==
					  titoTMH._document(views[i]).displayPath
				   )
				)
				{
				  tabs[tabs.length] = views[i];
				  break;
				}
			  }
			}
			return tabs;
		  },
		  //returns an array with the views of the NON-selected tabs
		  //the array will contain all the non-selected tabs from all the views if the selection comes from multiples browsers.
		  //the array will contain all the non-selected tabs from the current browser if the selection comes from only one browser.
		  getNonSelectedTabs:function()
		  {
			//this holds if the selected tabs comes from multiples splited views.
			//this is saved for example to allow the command "close other tabs" only close tabs from same browser/splited view.
			var mixedBrowsers = false;
			var selectedBrowser = 0; // in case the selection come from one browser.
			var browsers = '';
			for(var id in titoTMH._selection)
			{
			  if(!titoTMH._selection[id])
				continue;
			  browsers += titoTMH._selection[id].parentNode.parentNode.parentNode.id.replace('view-', '');
			}
			
			if(browsers.indexOf('1') != -1 && browsers.indexOf('2') != -1)
			  mixedBrowsers = true;
			else
			{
			  if(browsers.indexOf('1') != -1)
				selectedBrowser = 1;
			  else
				selectedBrowser = 2;
			}
			
			var tabs = [];
			var selectedTabs = titoTMH.getSelectedTabs();
			var views = ko.views.manager.topView.getDocumentViews(true);
			for(var i=0;i<views.length;i++)
			{
			  var uid = views[i].uid;
			  var found = false;
			  
			  if(selectedTabs.indexOf(views[i]) != -1)
			  {
				found = true;
			  }
			  else
			  {
				if(mixedBrowsers)
				{
				  
				}
				else if(views[i].tabbedViewId != selectedBrowser)
				{
				  found = true;
				}
			  }
			  
			  if(!found)
				tabs[tabs.length] = views[i];
			}
			return tabs;
		  },
		  _eventsStop:function()
		  {
			titoTMH._el('topview').addEventListener('dragstart', titoTMH._eventStop, true);
			titoTMH._el('topview').addEventListener('dragover', titoTMH._eventStop, true);
			titoTMH._el('topview').addEventListener('dragenter', titoTMH._eventStop, true);
			titoTMH._el('topview').addEventListener('drop', titoTMH._eventStop, true);
			titoTMH._el('topview').addEventListener('dragdrop', titoTMH._eventStop, true);
			titoTMH._el('topview').addEventListener('dragexit', titoTMH._eventStop, true);
		  },
		  _eventsAllow:function()
		  {
			titoTMH._el('topview').removeEventListener('dragstart', titoTMH._eventStop, true);
			titoTMH._el('topview').removeEventListener('dragover', titoTMH._eventStop, true);
			titoTMH._el('topview').removeEventListener('dragenter', titoTMH._eventStop, true);
			titoTMH._el('topview').removeEventListener('drop', titoTMH._eventStop, true);
			titoTMH._el('topview').removeEventListener('dragdrop', titoTMH._eventStop, true);
			titoTMH._el('topview').removeEventListener('dragexit', titoTMH._eventStop, true);
		  },
		  _eventStop:function(aEvent)
		  {
			aEvent.stopPropagation();
			aEvent.preventDefault();
		  },
		  _getTab:function(aNode)
		  {
			try
			{
			  if(aNode.tagName == 'tab')
				return aNode;
			  else if(aNode.parentNode.tagName == 'tab')
				return aNode.parentNode;
			  else if(aNode.parentNode.parentNode.tagName == 'tab')
				return aNode.parentNode.parentNode;
			  else if(aNode.parentNode.parentNode.parentNode.tagName == 'tab')
				return aNode.parentNode.parentNode.parentNode;
			  else if(aNode.parentNode.parentNode.parentNode.parentNode.tagName == 'tab')
				return aNode.parentNode.parentNode.parentNode.parentNode;
			  else if(aNode.parentNode.parentNode.parentNode.parentNode.tagName == 'tab')
				return aNode.parentNode.parentNode.parentNode.parentNode;
			  else
				return false;
			}
			catch(e)
			{
			  return false;
			}
		  },
		  _document:function(aTab)
		  {
			return aTab.document || aTab.koDoc;
		  },
		  _el:function(aElement)
		  {
			return document.getElementById(aElement);
		  }
		};
  
		addEventListener('load', titoTMH.load, false);
		addEventListener('unload', titoTMH.unload, false);
	  ]]>
	</script>
	
	<popupset id="extensionPopupSet">
	  <menupopup id="titoTMH" onpopuphidden="titoTMH.clearSelection(this)">
		<menuitem label="Close selected tabs" action="close" oncommand="titoTMH.onCommand(this)"/>
		<menuitem label="Close other tabs" action="close-others" oncommand="titoTMH.onCommand(this)"/>
		<menuseparator/>
		<menuitem label="Save selected tabs" action="save" oncommand="titoTMH.onCommand(this)"/>
	  </menupopup>
	</popupset>

</overlay>